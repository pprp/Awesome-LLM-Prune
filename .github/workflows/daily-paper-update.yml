name: Daily ArXiv Paper Update

on:
  schedule:
    # Run daily at 9:00 AM UTC (you can adjust this time)
    - cron: '0 9 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  update-papers:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        pip install requests feedparser python-dateutil openai anthropic
        
    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
    - name: Run paper update script
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: python scripts/update_papers.py
      
    - name: Check for changes and create individual PRs
      id: verify-changed-files
      run: |
        echo "Checking for new commits..."
        
        # Get list of new commits (commits not in origin/main)
        git fetch origin main
        NEW_COMMITS=$(git rev-list HEAD ^origin/main --reverse)
        
        if [ -z "$NEW_COMMITS" ]; then
          echo "No new commits found."
          echo "changed=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "Found new commits, creating individual PRs..."
        echo "changed=true" >> $GITHUB_OUTPUT
        
        # Create PR for each commit
        COMMIT_COUNT=0
        for commit in $NEW_COMMITS; do
          COMMIT_COUNT=$((COMMIT_COUNT + 1))
          
          # Get commit details
          COMMIT_MESSAGE=$(git log --format=%s -n 1 $commit)
          COMMIT_BODY=$(git log --format=%b -n 1 $commit)
          
          # Extract paper title from commit message
          PAPER_TITLE=$(echo "$COMMIT_MESSAGE" | sed 's/Add paper: //')
          
          # Create a unique branch for this commit
          BRANCH_NAME="paper-${{ github.run_id }}-${COMMIT_COUNT}"
          
          # Create branch from this specific commit  
          git checkout -b "$BRANCH_NAME" $commit
          git push origin "$BRANCH_NAME"
          
          # Create PR using GitHub CLI
          PR_TITLE="üìÑ New Paper: $PAPER_TITLE"
          PR_BODY="## ‚úÇÔ∏è New LLM Pruning Paper \n\n **Paper Title:** $PAPER_TITLE \n\n ü§ñ Generated automatically by GitHub Actions\n\n\n\n **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --head "$BRANCH_NAME" \
            --base main
          
          echo "Created PR for: $PAPER_TITLE"
          
          # Return to main branch for next iteration
          git checkout main
        done
        
        echo "Created $COMMIT_COUNT individual PRs"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: No changes found
      if: steps.verify-changed-files.outputs.changed == 'false'
      run: |
        echo "No new papers found or no changes to commit."